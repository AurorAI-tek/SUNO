"Develop a full-stack web application for a 'Suno Music Prompt Helper' website that assists users in exploring and utilizing Suno's music generation features, with a special emphasis on lesser-known aspects such as meta tags and advanced customization options. The application should allow users to type and click through an intuitive interface, include an AI assistant powered by the GROQ API, and feature a separate admin panel for management. Here are the detailed requirements:
Website Components
1. Main User Interface

    Homepage:
        A prominent input field where users can type their music prompts.
        A navigation bar with links to: Home, Features, Meta Tags, AI Assistant, and About.
    Features Page:
        Detailed explanations of Suno's advanced features, including Custom Mode, song extension, and audio uploading for reinterpretation.
        Include examples and use cases for each feature.
    Meta Tags Page:
        A comprehensive section dedicated to meta tags (e.g., [Verse], [Chorus], [Mood: upbeat]), explaining their purpose, syntax, and impact on music generation.
        Provide a list of common meta tags with descriptions and sample prompts demonstrating their use (e.g., [Instrumental Break] adds a solo section).
    Design:
        Responsive, music-themed aesthetic (e.g., waveforms, musical notes) with clean, intuitive navigation.

2. Interactive Tutorials

    Include step-by-step guides or interactive elements (e.g., clickable examples) on the Features and Meta Tags pages to demonstrate how to use these advanced options.
    Use visual aids like code snippets, tooltips, or embedded audio examples (if feasible) to enhance user understanding.

3. AI Assistant

    Interface:
        A dedicated AI Assistant page with a chat window where users can type questions or requests (e.g., 'How do I use meta tags?' or 'Suggest a prompt for a jazz song').
    Functionality:
        Powered by the GROQ API; include code to send user messages to the API and display responses in real-time.
        Capable of answering questions about Suno, providing prompt suggestions, or explaining features based on user input.
    Integration:
        Securely handle GROQ API calls using environment variables for the API key.

4. Admin Panel

    Access:
        A separate login page for administrators, accessible via a distinct URL (e.g., /admin).
        Implement user authentication (e.g., JWT or session-based) to restrict access.
    Features:
        A dashboard to edit content for the Features and Meta Tags pages (e.g., add new meta tag examples or update feature descriptions).
        Tools to view logs or statistics of AI assistant usage (e.g., number of queries processed).
    Design:
        Simple, functional layout tailored for administrative tasks.

Technical Specifications

    Frontend:
        Use React.js to build a dynamic, responsive user interface.
        Include components for the homepage, navigation, feature pages, and AI chat interface.
    Backend:
        Use Node.js with Express.js to create a server handling API requests.
        Provide endpoints for:
            Serving static content (e.g., feature descriptions, meta tag data).
            Proxying AI assistant requests to the GROQ API.
            Managing admin panel operations (e.g., content updates, login authentication).
    Database:
        Use MongoDB to store:
            Content for Features and Meta Tags pages (editable by admins).
            Optional: Logs of AI assistant interactions or user feedback.

            mongodb+srv://gogberg:Ybykv3H50wbuLJAI@cluster0.o0pgb.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

            
    Security:
        Implement HTTPS for secure communication.
        Use environment variables (e.g., .env file) to store sensitive data like the GROK API key.
        Validate and sanitize all user inputs to prevent injection attacks.
        Secure the admin panel with authentication and authorization checks.
    Performance:
        Optimize the website for fast loading and smooth interactions.
        Handle errors gracefully with user-friendly messages (e.g., 'Failed to connect to AI assistant, please try again').

Additional Requirements

    Documentation:
        Include a README.md file with:
            Instructions to set up the project (e.g., npm install, setting up MongoDB).
            Steps to configure environment variables (e.g., GROQ_API_KEY).
            Commands to run the application (e.g., npm start for frontend and backend).
        Add inline code comments explaining key functionalities (e.g., API integration, authentication logic).
    Special Emphasis:
        Prioritize educating users about Suno’s lesser-known features. The Meta Tags page should be particularly detailed, offering a comprehensive list of tags, their usage, and practical examples.
    Deliverables:
        Provide all necessary files, including:
            Frontend source code (React components, CSS, etc.).
            Backend source code (Express routes, API logic).
            Database schema and initial data (e.g., sample meta tags).
            Configuration files (e.g., package.json, .env.example).

More info:

Here are all the citation URLs listed in plain text:

- https://en.wikipedia.org/wiki/Suno_AI
- https://suno.com/blog/v4
- https://sunoaiwiki.com/resources/2024-05-13-list-of-metatags/
- https://fltmag.com/suno-ai/
- https://deadline.com/2024/08/ai-startup-suno-claims-copyright-doctrine-allows-ai-training-1236029563/
- https://help.suno.com/en/articles/2746945
- https://www.techradar.com/computing/artificial-intelligence/what-is-suno-ai
- https://vi-control.net/community/threads/how-exactly-do-suno-ai-and-udio-com-work-technical-view.151041/
- https://github.com/suno-ai/bark/blob/main/model-card.md
- https://sunoprompt.com/blog/metatags-for-suno-ai-model-collection



The final application should be a fully functional, deployable website that simplifies the use of Suno’s advanced features, offers real-time AI assistance, and provides administrative controls for ongoing maintenance."